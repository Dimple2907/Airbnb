<% layout("/layouts/boilerplate") %>

<!-- Login Hero Section -->
<div class="auth-hero">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-6 text-center">
                <h1 class="hero-title gradient-text">Welcome Back</h1>
                <p class="hero-subtitle">Sign in to continue your journey with Wanderlust</p>
            </div>
        </div>
    </div>
</div>

<!-- Login Form Section -->
<div class="container auth-container">
    <div class="row justify-content-center">
        <div class="col-lg-5 col-md-7 col-sm-9">
            <div class="auth-card">
                <div class="auth-header">
                    <div class="auth-icon">
                        <i class="fas fa-user-circle"></i>
                    </div>
                    <h2 class="auth-title">Sign In</h2>
                    <p class="auth-subtitle">Enter your credentials to access your account</p>
                </div>

                <form action="/login" method="post" class="needs-validation auth-form" novalidate id="loginForm">
                    <div class="form-group">
                        <label for="username" class="form-label">
                            <i class="fas fa-user"></i>
                            Username
                        </label>
                        <input 
                            type="text" 
                            name="username" 
                            id="username"
                            class="form-control modern-input" 
                            placeholder="Enter your username"
                            autocomplete="username"
                            required
                        >
                        <div class="valid-feedback">
                            <i class="fas fa-check-circle"></i>
                            Username looks good!
                        </div>
                        <div class="invalid-feedback">
                            <i class="fas fa-exclamation-circle"></i>
                            Please enter your username
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="password" class="form-label">
                            <i class="fas fa-lock"></i>
                            Password
                        </label>
                        <div class="password-input-wrapper">
                            <input 
                                type="password" 
                                name="password" 
                                id="password"
                                class="form-control modern-input" 
                                placeholder="Enter your password"
                                autocomplete="current-password"
                                required
                            >
                            <button type="button" class="password-toggle" id="togglePassword" aria-label="Toggle password visibility">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                        <div class="security-indicator" id="securityIndicator" style="display: none;">
                            <i class="fas fa-shield-alt"></i>
                            <span>Secure connection established</span>
                        </div>
                        <div class="invalid-feedback">
                            <i class="fas fa-exclamation-circle"></i>
                            Please enter your password
                        </div>
                    </div>                    <div class="form-options">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="rememberMe" name="rememberMe">
                            <label class="form-check-label" for="rememberMe">
                                Remember me
                            </label>
                        </div>
                        <a href="#" class="forgot-password" data-bs-toggle="modal" data-bs-target="#forgotPasswordModal">Forgot password?</a>
                    </div>

                    <button type="submit" class="btn btn-primary btn-lg w-100 auth-submit" id="loginBtn">
                        <span class="btn-text">
                            <i class="fas fa-sign-in-alt"></i>
                            Sign In
                        </span>
                        <span class="btn-loading" style="display: none;">
                            <i class="fas fa-spinner fa-spin"></i>
                            Signing in...
                        </span>
                    </button>
                </form>

                <div class="auth-divider">
                    <span>or</span>
                </div>

                <div class="social-login">
                    <button class="btn btn-outline-secondary social-btn">
                        <i class="fab fa-google"></i>
                        Continue with Google
                    </button>
                    <button class="btn btn-outline-secondary social-btn">
                        <i class="fab fa-facebook-f"></i>
                        Continue with Facebook
                    </button>
                </div>

                <div class="auth-footer">
                    <p>Don't have an account? 
                        <a href="/signup" class="auth-link">Sign up here</a>
                    </p>
                </div>
            </div>
        </div>    </div>
</div>

<!-- Forgot Password Modal -->
<div class="modal fade" id="forgotPasswordModal" tabindex="-1" aria-labelledby="forgotPasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="forgotPasswordModalLabel">
                    <i class="fas fa-key me-2"></i>Reset Password
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="text-muted mb-3">Enter your email address and we'll send you a link to reset your password.</p>
                <form id="forgotPasswordForm">
                    <div class="form-group">
                        <label for="resetEmail" class="form-label">
                            <i class="fas fa-envelope"></i>
                            Email Address
                        </label>
                        <input 
                            type="email" 
                            class="form-control modern-input" 
                            id="resetEmail" 
                            placeholder="Enter your email address"
                            required
                        >
                        <div class="invalid-feedback">
                            Please enter a valid email address
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="sendResetBtn">
                    <span class="btn-text">
                        <i class="fas fa-paper-plane"></i>
                        Send Reset Link
                    </span>
                    <span class="btn-loading" style="display: none;">
                        <i class="fas fa-spinner fa-spin"></i>
                        Sending...
                    </span>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Features Section -->
<div class="features-section">
    <div class="container">
        <div class="row">
            <div class="col-md-4">
                <div class="feature-item">
                    <div class="feature-icon">
                        <i class="fas fa-home"></i>
                    </div>
                    <h3>Find Perfect Stays</h3>
                    <p>Discover unique accommodations around the world</p>
                </div>
            </div>
            <div class="col-md-4">
                <div class="feature-item">
                    <div class="feature-icon">
                        <i class="fas fa-shield-alt"></i>
                    </div>
                    <h3>Secure Booking</h3>
                    <p>Your payments and personal information are protected</p>
                </div>
            </div>
            <div class="col-md-4">
                <div class="feature-item">
                    <div class="feature-icon">
                        <i class="fas fa-headset"></i>
                    </div>
                    <h3>24/7 Support</h3>
                    <p>Get help whenever you need it from our support team</p>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('loginForm');
    const usernameInput = document.getElementById('username');
    const passwordInput = document.getElementById('password');
    const togglePasswordBtn = document.getElementById('togglePassword');
    const loginBtn = document.getElementById('loginBtn');
    const securityIndicator = document.getElementById('securityIndicator');
    
    // Security and rate limiting
    let loginAttempts = parseInt(localStorage.getItem('loginAttempts') || '0');
    let lastAttemptTime = parseInt(localStorage.getItem('lastAttemptTime') || '0');
    const maxAttempts = 5;
    const lockoutDuration = 15 * 60 * 1000; // 15 minutes
    
    // Check if user is currently locked out
    checkLoginLockout();
    
    // Show security indicator when connection is secure
    if (location.protocol === 'https:') {
        securityIndicator.style.display = 'flex';
        securityIndicator.classList.add('secure');
    }

    // Password visibility toggle
    togglePasswordBtn.addEventListener('click', function() {
        const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordInput.setAttribute('type', type);
        
        const icon = this.querySelector('i');
        if (type === 'password') {
            icon.classList.remove('fa-eye-slash');
            icon.classList.add('fa-eye');
        } else {
            icon.classList.remove('fa-eye');
            icon.classList.add('fa-eye-slash');
        }
    });    // Form validation and submission
    form.addEventListener('submit', function(e) {
        // Check lockout status before allowing submission
        if (isLockedOut()) {
            e.preventDefault();
            e.stopPropagation();
            const remainingTime = Math.ceil((lastAttemptTime + lockoutDuration - Date.now()) / 60000);
            showToast(`Too many failed attempts. Please try again in ${remainingTime} minutes.`, 'error');
            return;
        }
        
        if (!form.checkValidity()) {
            e.preventDefault();
            e.stopPropagation();
            
            // Shake animation for invalid form
            form.classList.add('shake');
            setTimeout(() => form.classList.remove('shake'), 500);
        } else {
            // Show loading state
            loginBtn.querySelector('.btn-text').style.display = 'none';
            loginBtn.querySelector('.btn-loading').style.display = 'inline-block';
            loginBtn.disabled = true;
        }
        
        form.classList.add('was-validated');
    });

    // Input animations
    [usernameInput, passwordInput].forEach(input => {
        input.addEventListener('focus', function() {
            this.parentElement.classList.add('focused');
        });

        input.addEventListener('blur', function() {
            if (!this.value) {
                this.parentElement.classList.remove('focused');
            }
        });

        input.addEventListener('input', function() {
            if (this.value) {
                this.parentElement.classList.add('has-value');
            } else {
                this.parentElement.classList.remove('has-value');
            }
        });
    });    // Social login handlers
    document.querySelectorAll('.social-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            // Add ripple effect
            this.classList.add('clicked');
            setTimeout(() => this.classList.remove('clicked'), 300);
            
            // Show coming soon message
            const provider = this.textContent.includes('Google') ? 'Google' : 'Facebook';
            showToast(`${provider} login coming soon!`, 'info');
        });
    });
    
    // Forgot password functionality
    const sendResetBtn = document.getElementById('sendResetBtn');
    const forgotPasswordForm = document.getElementById('forgotPasswordForm');
    const resetEmailInput = document.getElementById('resetEmail');
    
    if (sendResetBtn && forgotPasswordForm) {
        sendResetBtn.addEventListener('click', function() {
            const email = resetEmailInput.value.trim();
            
            if (!email || !isValidEmail(email)) {
                resetEmailInput.classList.add('is-invalid');
                return;
            }
            
            // Show loading state
            sendResetBtn.querySelector('.btn-text').style.display = 'none';
            sendResetBtn.querySelector('.btn-loading').style.display = 'inline-block';
            sendResetBtn.disabled = true;
            
            // Simulate API call
            setTimeout(() => {
                showToast('Password reset link sent to your email!', 'success');
                bootstrap.Modal.getInstance(document.getElementById('forgotPasswordModal')).hide();
                
                // Reset form
                forgotPasswordForm.reset();
                resetEmailInput.classList.remove('is-invalid');
                sendResetBtn.querySelector('.btn-text').style.display = 'inline-block';
                sendResetBtn.querySelector('.btn-loading').style.display = 'none';
                sendResetBtn.disabled = false;
            }, 2000);
        });
        
        resetEmailInput.addEventListener('input', function() {
            if (this.classList.contains('is-invalid') && isValidEmail(this.value)) {
                this.classList.remove('is-invalid');
            }
        });
    }
      // Helper functions
    function checkLoginLockout() {
        if (isLockedOut()) {
            const remainingTime = Math.ceil((lastAttemptTime + lockoutDuration - Date.now()) / 60000);
            loginBtn.disabled = true;
            loginBtn.innerHTML = `<i class="fas fa-clock"></i> Locked for ${remainingTime} minutes`;
            
            // Set a timer to re-enable login when lockout expires
            setTimeout(() => {
                if (!isLockedOut()) {
                    resetLoginAttempts();
                    loginBtn.disabled = false;
                    loginBtn.innerHTML = '<span class="btn-text"><i class="fas fa-sign-in-alt"></i> Sign In</span><span class="btn-loading" style="display: none;"><i class="fas fa-spinner fa-spin"></i> Signing in...</span>';
                }
            }, (lastAttemptTime + lockoutDuration - Date.now()));
        }
    }
    
    function isLockedOut() {
        return loginAttempts >= maxAttempts && (Date.now() - lastAttemptTime) < lockoutDuration;
    }
    
    function recordFailedAttempt() {
        loginAttempts++;
        lastAttemptTime = Date.now();
        localStorage.setItem('loginAttempts', loginAttempts.toString());
        localStorage.setItem('lastAttemptTime', lastAttemptTime.toString());
        
        if (loginAttempts >= maxAttempts) {
            checkLoginLockout();
        }
    }
    
    function resetLoginAttempts() {
        localStorage.removeItem('loginAttempts');
        localStorage.removeItem('lastAttemptTime');
        loginAttempts = 0;
        lastAttemptTime = 0;
    }
    
    function isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }
    
    function showToast(message, type = 'info') {
        // Create toast element
        const toast = document.createElement('div');
        toast.className = `toast-notification toast-${type}`;
        toast.innerHTML = `
            <div class="toast-content">
                <i class="fas ${type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-info-circle'}"></i>
                <span>${message}</span>
            </div>
        `;
        
        // Add toast styles if not already added
        if (!document.querySelector('#toast-styles')) {
            const toastStyles = document.createElement('style');
            toastStyles.id = 'toast-styles';
            toastStyles.textContent = `
                .toast-notification {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    padding: 1rem 1.5rem;
                    border-radius: 0.5rem;
                    color: white;
                    font-weight: 500;
                    z-index: 9999;
                    transform: translateX(100%);
                    transition: transform 0.3s ease;
                    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
                }
                .toast-success { background: #28a745; }
                .toast-error { background: #dc3545; }
                .toast-info { background: #17a2b8; }
                .toast-content {
                    display: flex;
                    align-items: center;
                    gap: 0.5rem;
                }
                .toast-notification.show {
                    transform: translateX(0);
                }
            `;
            document.head.appendChild(toastStyles);
        }
        
        document.body.appendChild(toast);
        
        // Show toast
        setTimeout(() => toast.classList.add('show'), 100);
        
        // Hide toast after 3 seconds
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }
});
</script>