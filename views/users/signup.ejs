<% layout("/layouts/boilerplate") %>

<!-- Signup Hero Section -->
<div class="auth-hero">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-6 text-center">
                <h1 class="hero-title gradient-text">Join Wanderlust</h1>
                <p class="hero-subtitle">Create your account and start exploring amazing places</p>
            </div>
        </div>
    </div>
</div>

<!-- Signup Form Section -->
<div class="container auth-container">
    <div class="row justify-content-center">
        <div class="col-lg-5 col-md-7 col-sm-9">
            <div class="auth-card">
                <div class="auth-header">
                    <div class="auth-icon">
                        <i class="fas fa-user-plus"></i>
                    </div>
                    <h2 class="auth-title">Create Account</h2>
                    <p class="auth-subtitle">Fill in your details to get started</p>
                </div>

                <form action="/signup" method="post" class="needs-validation auth-form" novalidate id="signupForm">
                    <div class="form-group">
                        <label for="username" class="form-label">
                            <i class="fas fa-user"></i>
                            Username
                        </label>
                        <input 
                            type="text" 
                            name="username" 
                            id="username"
                            class="form-control modern-input" 
                            placeholder="Choose a unique username"
                            autocomplete="username"
                            minlength="3"
                            maxlength="20"
                            required
                        >                        <div class="input-help">
                            <small>3-20 characters, letters and numbers only</small>
                        </div>
                        <div class="username-availability" id="usernameAvailability" style="display: none;">
                            <small class="availability-text"></small>
                        </div>
                        <div class="valid-feedback">
                            <i class="fas fa-check-circle"></i>
                            Username is available!
                        </div>
                        <div class="invalid-feedback">
                            <i class="fas fa-exclamation-circle"></i>
                            Please enter a valid username (3-20 characters)
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="email" class="form-label">
                            <i class="fas fa-envelope"></i>
                            Email Address
                        </label>
                        <input 
                            type="email" 
                            name="email" 
                            id="email"
                            class="form-control modern-input" 
                            placeholder="Enter your email address"
                            autocomplete="email"
                            required
                        >
                        <div class="valid-feedback">
                            <i class="fas fa-check-circle"></i>
                            Email format looks good!
                        </div>
                        <div class="invalid-feedback">
                            <i class="fas fa-exclamation-circle"></i>
                            Please enter a valid email address
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="password" class="form-label">
                            <i class="fas fa-lock"></i>
                            Password
                        </label>
                        <div class="password-input-wrapper">
                            <input 
                                type="password" 
                                name="password" 
                                id="password"
                                class="form-control modern-input" 
                                placeholder="Create a strong password"
                                autocomplete="new-password"
                                minlength="8"
                                required
                            >
                            <button type="button" class="password-toggle" id="togglePassword">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                        <div class="password-strength" id="passwordStrength">
                            <div class="strength-bar">
                                <div class="strength-fill"></div>
                            </div>
                            <div class="strength-text">Password strength: <span></span></div>
                        </div>
                        <div class="input-help">
                            <small>At least 8 characters with letters, numbers, and special characters</small>
                        </div>                        <div class="invalid-feedback">
                            <i class="fas fa-exclamation-circle"></i>
                            Password must be at least 8 characters long
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="confirmPassword" class="form-label">
                            <i class="fas fa-lock"></i>
                            Confirm Password
                        </label>                        <div class="password-input-wrapper">
                            <input 
                                type="password" 
                                id="confirmPassword"
                                class="form-control modern-input" 
                                placeholder="Confirm your password"
                                autocomplete="new-password"
                                required
                            >
                            <button type="button" class="password-toggle" id="toggleConfirmPassword" aria-label="Toggle password visibility">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                        <div class="security-indicator" id="passwordSecurityCheck" style="display: none;">
                            <i class="fas fa-shield-check"></i>
                            <span>Password meets security requirements</span>
                        </div>
                        <div class="password-match" id="passwordMatch" style="display: none;">
                            <small class="match-text"></small>
                        </div>
                        <div class="invalid-feedback">
                            <i class="fas fa-exclamation-circle"></i>
                            Passwords do not match
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="acceptTerms" required>
                            <label class="form-check-label" for="acceptTerms">
                                I agree to the <a href="#" class="terms-link">Terms of Service</a> and 
                                <a href="#" class="terms-link">Privacy Policy</a>
                            </label>
                            <div class="invalid-feedback">
                                You must agree to the terms and conditions
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="newsletter">
                            <label class="form-check-label" for="newsletter">
                                Send me travel tips and exclusive offers
                            </label>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary btn-lg w-100 auth-submit" id="signupBtn">
                        <span class="btn-text">
                            <i class="fas fa-user-plus"></i>
                            Create Account
                        </span>
                        <span class="btn-loading" style="display: none;">
                            <i class="fas fa-spinner fa-spin"></i>
                            Creating account...
                        </span>
                    </button>
                </form>

                <div class="auth-divider">
                    <span>or</span>
                </div>

                <div class="social-login">
                    <button class="btn btn-outline-secondary social-btn">
                        <i class="fab fa-google"></i>
                        Continue with Google
                    </button>
                    <button class="btn btn-outline-secondary social-btn">
                        <i class="fab fa-facebook-f"></i>
                        Continue with Facebook
                    </button>
                </div>

                <div class="auth-footer">
                    <p>Already have an account? 
                        <a href="/login" class="auth-link">Sign in here</a>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Benefits Section -->
<div class="benefits-section">
    <div class="container">
        <div class="row">
            <div class="col-12 text-center mb-5">
                <h2 class="section-title">Why Join Wanderlust?</h2>
            </div>
        </div>
        <div class="row">
            <div class="col-md-3 col-sm-6 mb-4">
                <div class="benefit-item">
                    <div class="benefit-icon">
                        <i class="fas fa-globe-americas"></i>
                    </div>
                    <h3>Global Network</h3>
                    <p>Access millions of unique stays worldwide</p>
                </div>
            </div>
            <div class="col-md-3 col-sm-6 mb-4">
                <div class="benefit-item">
                    <div class="benefit-icon">
                        <i class="fas fa-dollar-sign"></i>
                    </div>
                    <h3>Best Prices</h3>
                    <p>Compare prices and find the best deals</p>
                </div>
            </div>
            <div class="col-md-3 col-sm-6 mb-4">
                <div class="benefit-item">
                    <div class="benefit-icon">
                        <i class="fas fa-star"></i>
                    </div>
                    <h3>Verified Reviews</h3>
                    <p>Read authentic reviews from real travelers</p>
                </div>
            </div>
            <div class="col-md-3 col-sm-6 mb-4">
                <div class="benefit-item">
                    <div class="benefit-icon">
                        <i class="fas fa-mobile-alt"></i>
                    </div>
                    <h3>Easy Booking</h3>
                    <p>Book instantly on any device, anywhere</p>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('signupForm');
    const usernameInput = document.getElementById('username');
    const emailInput = document.getElementById('email');
    const passwordInput = document.getElementById('password');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    const togglePasswordBtn = document.getElementById('togglePassword');
    const toggleConfirmPasswordBtn = document.getElementById('toggleConfirmPassword');
    const signupBtn = document.getElementById('signupBtn');
    const strengthIndicator = document.getElementById('passwordStrength');
    const usernameAvailability = document.getElementById('usernameAvailability');
    const passwordMatch = document.getElementById('passwordMatch');

    let usernameCheckTimeout;

    // Password visibility toggles
    togglePasswordBtn.addEventListener('click', function() {
        togglePasswordVisibility(passwordInput, this);
    });
    
    toggleConfirmPasswordBtn.addEventListener('click', function() {
        togglePasswordVisibility(confirmPasswordInput, this);
    });
    
    function togglePasswordVisibility(input, button) {
        const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
        input.setAttribute('type', type);
        
        const icon = button.querySelector('i');
        if (type === 'password') {
            icon.classList.remove('fa-eye-slash');
            icon.classList.add('fa-eye');
        } else {
            icon.classList.remove('fa-eye');
            icon.classList.add('fa-eye-slash');
        }
    }

    // Password strength checker
    passwordInput.addEventListener('input', function() {
        const password = this.value;
        const strength = calculatePasswordStrength(password);
        updatePasswordStrength(strength);
    });    function calculatePasswordStrength(password) {
        let score = 0;
        let feedback = [];

        if (password.length >= 8) score += 1;
        else feedback.push('At least 8 characters');

        if (/[a-z]/.test(password)) score += 1;
        else feedback.push('Lowercase letter');

        if (/[A-Z]/.test(password)) score += 1;
        else feedback.push('Uppercase letter');

        if (/[0-9]/.test(password)) score += 1;
        else feedback.push('Number');

        if (/[^A-Za-z0-9]/.test(password)) score += 1;
        else feedback.push('Special character');

        // Update security indicator
        const securityIndicator = document.getElementById('passwordSecurityCheck');
        if (score >= 4) {
            securityIndicator.style.display = 'flex';
            securityIndicator.classList.add('secure');
            securityIndicator.classList.remove('warning', 'danger');
        } else if (score >= 2) {
            securityIndicator.style.display = 'flex';
            securityIndicator.classList.add('warning');
            securityIndicator.classList.remove('secure', 'danger');
            securityIndicator.querySelector('span').textContent = 'Password strength could be improved';
        } else if (password.length > 0) {
            securityIndicator.style.display = 'flex';
            securityIndicator.classList.add('danger');
            securityIndicator.classList.remove('secure', 'warning');
            securityIndicator.querySelector('span').textContent = 'Password is too weak';
        } else {
            securityIndicator.style.display = 'none';
        }

        return { score, feedback };
    }

    function updatePasswordStrength(strength) {
        const fill = strengthIndicator.querySelector('.strength-fill');
        const text = strengthIndicator.querySelector('.strength-text span');
        
        const colors = ['#ff4757', '#ff6b6b', '#ffa502', '#2ed573', '#2ed573'];
        const labels = ['Very Weak', 'Weak', 'Fair', 'Good', 'Strong'];
        
        const percentage = (strength.score / 5) * 100;
        fill.style.width = percentage + '%';
        fill.style.backgroundColor = colors[strength.score];
        text.textContent = labels[strength.score];
        text.style.color = colors[strength.score];
    }    // Username validation and availability check
    usernameInput.addEventListener('input', function() {
        const username = this.value.trim();
        const isValid = /^[a-zA-Z0-9]{3,20}$/.test(username);
        
        // Clear previous timeout
        clearTimeout(usernameCheckTimeout);
        
        if (username.length === 0) {
            usernameAvailability.style.display = 'none';
            this.setCustomValidity('');
            return;
        }
        
        if (!isValid) {
            this.setCustomValidity('Username must be 3-20 characters long and contain only letters and numbers');
            usernameAvailability.style.display = 'block';
            usernameAvailability.innerHTML = '<small class="text-danger"><i class="fas fa-times-circle"></i> Invalid username format</small>';
            return;
        }
        
        this.setCustomValidity('');
        usernameAvailability.style.display = 'block';
        usernameAvailability.innerHTML = '<small class="text-info"><i class="fas fa-spinner fa-spin"></i> Checking availability...</small>';
          // Simulate API call to check username availability
        usernameCheckTimeout = setTimeout(async () => {
            try {
                const response = await fetch(`/check-username/${encodeURIComponent(username)}`);
                const data = await response.json();
                
                if (data.available) {
                    usernameAvailability.innerHTML = '<small class="text-success"><i class="fas fa-check-circle"></i> Username is available!</small>';
                } else {
                    usernameAvailability.innerHTML = '<small class="text-danger"><i class="fas fa-times-circle"></i> ' + data.message + '</small>';
                    this.setCustomValidity(data.message);
                }
            } catch (error) {
                // Fallback to client-side check
                const isAvailable = !['admin', 'user', 'test', 'demo', 'wanderlust'].includes(username.toLowerCase());
                
                if (isAvailable) {
                    usernameAvailability.innerHTML = '<small class="text-success"><i class="fas fa-check-circle"></i> Username is available!</small>';
                } else {
                    usernameAvailability.innerHTML = '<small class="text-danger"><i class="fas fa-times-circle"></i> Username is already taken</small>';
                    this.setCustomValidity('Username is already taken');
                }
            }
        }, 800);
    });

    // Password confirmation validation
    function validatePasswordMatch() {
        const password = passwordInput.value;
        const confirmPassword = confirmPasswordInput.value;
        
        if (confirmPassword.length === 0) {
            passwordMatch.style.display = 'none';
            confirmPasswordInput.setCustomValidity('');
            return;
        }
        
        passwordMatch.style.display = 'block';
        
        if (password === confirmPassword) {
            passwordMatch.innerHTML = '<small class="text-success"><i class="fas fa-check-circle"></i> Passwords match</small>';
            confirmPasswordInput.setCustomValidity('');
        } else {
            passwordMatch.innerHTML = '<small class="text-danger"><i class="fas fa-times-circle"></i> Passwords do not match</small>';
            confirmPasswordInput.setCustomValidity('Passwords do not match');
        }
    }
    
    passwordInput.addEventListener('input', function() {
        const password = this.value;
        const strength = calculatePasswordStrength(password);
        updatePasswordStrength(strength);
        
        // Revalidate password match if confirm password has value
        if (confirmPasswordInput.value) {
            validatePasswordMatch();
        }
    });
    
    confirmPasswordInput.addEventListener('input', validatePasswordMatch);

    // Form validation and submission
    form.addEventListener('submit', function(e) {
        if (!form.checkValidity()) {
            e.preventDefault();
            e.stopPropagation();
            
            // Shake animation for invalid form
            form.classList.add('shake');
            setTimeout(() => form.classList.remove('shake'), 500);
        } else {
            // Show loading state
            signupBtn.querySelector('.btn-text').style.display = 'none';
            signupBtn.querySelector('.btn-loading').style.display = 'inline-block';
            signupBtn.disabled = true;
        }
        
        form.classList.add('was-validated');
    });    // Input animations
    [usernameInput, emailInput, passwordInput, confirmPasswordInput].forEach(input => {
        input.addEventListener('focus', function() {
            this.parentElement.classList.add('focused');
        });

        input.addEventListener('blur', function() {
            if (!this.value) {
                this.parentElement.classList.remove('focused');
            }
        });

        input.addEventListener('input', function() {
            if (this.value) {
                this.parentElement.classList.add('has-value');
            } else {
                this.parentElement.classList.remove('has-value');
            }
        });
    });

    // Social login handlers
    document.querySelectorAll('.social-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            // Add ripple effect
            this.classList.add('clicked');
            setTimeout(() => this.classList.remove('clicked'), 300);
            
            // Show coming soon message
            const provider = this.textContent.includes('Google') ? 'Google' : 'Facebook';
            showToast(`${provider} signup coming soon!`, 'info');
        });
    });
    
    // Helper functions
    function showToast(message, type = 'info') {
        // Create toast element
        const toast = document.createElement('div');
        toast.className = `toast-notification toast-${type}`;
        toast.innerHTML = `
            <div class="toast-content">
                <i class="fas ${type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-info-circle'}"></i>
                <span>${message}</span>
            </div>
        `;
        
        // Add toast styles if not already added
        if (!document.querySelector('#toast-styles')) {
            const toastStyles = document.createElement('style');
            toastStyles.id = 'toast-styles';
            toastStyles.textContent = `
                .toast-notification {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    padding: 1rem 1.5rem;
                    border-radius: 0.5rem;
                    color: white;
                    font-weight: 500;
                    z-index: 9999;
                    transform: translateX(100%);
                    transition: transform 0.3s ease;
                    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
                }
                .toast-success { background: #28a745; }
                .toast-error { background: #dc3545; }
                .toast-info { background: #17a2b8; }
                .toast-content {
                    display: flex;
                    align-items: center;
                    gap: 0.5rem;
                }
                .toast-notification.show {
                    transform: translateX(0);
                }
            `;
            document.head.appendChild(toastStyles);
        }
        
        document.body.appendChild(toast);
        
        // Show toast
        setTimeout(() => toast.classList.add('show'), 100);
        
        // Hide toast after 3 seconds
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }
});
</script>